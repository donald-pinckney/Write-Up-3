# Problem 3: Linear Regression
Based on: https://en.wikipedia.org/wiki/Simple_linear_regression

# Introduction

In this problem, you will be writing a program to compute a linear regression of some data.  A linear regression is a line of best fit 
through some given data points.  This is an interesting and useful problem; in fact, App Programming does these sorts of regression
problems frequently. For example, App Programming could use linear regression to predict match outcomes based on robot stats.

Specifically, you are given many order pair (x, y) data points, and you want to determine m and b so that the line y = mx + b is the 
line of best fit.

For example, if the data points are: (0, 0); (1, 1); (2, 2), then we can actually have a perfect line of 
best fit: y = 1.0000 * x + 0.0000, since that line passes through all the data points. Most of the times there is not a perfect line of
best fit. For example, if the data points are: (0, 0); (1, 1); (2, 3), then the line of best fit is actually y = 1.5000 * x - 0.1667. 
I would recommend using some graphing software or calculator to visualize this data set and line.

# How to Compute the Linear Regression

I don't expect you to understand the math behind the linear regression, so I will just give you the equations for it.  However, you 
should understand 2 things: 

1. Intuitively what the point of linear regression is
2. How to code the linear regression given the equations

So, recall that we have many ordered pair data points. These will be read into arrays. Let xData be the array containing all the x values of the data points, and let yData be the array containing all the y values of the data points. So, the first ordered pair would be: (xData[0], yData[0]). With this given data, our goal is to compute the best m and b for the line y = mx + b

First, to compute m:
`m = (average of xData*yData - (average of xData)*(average of yData)) / (average of xData^2 - (average of xData)^2)`

Let's break this down term-by-term.  First, `average of xData*yData` means to multiply each element of xData by the corresponding element of yData. Then, that gives you a new array of values. Finally, compute the average of that array. So, this means to multiply first, then average.

In contrast, `(average of xData)*(average of yData)` means to separately compute the averages of xData and yData, and then multiply just the averages. So, this term means to average, and then multiply.

Now, `average of xData^2` means to square first, and then average. So, you would individually square every value in xData, and then take the average of all those squares.

Finally, `(average of xData)^2` means to average first, and then square. So, you would compute the average of xData, and then square just that single number.

Now, we just need to compute b, which is simpler:

`b = (average of yData) - m * (average of xData)`

Note that for b you use the value of m that you already computed.


# Example Computation
To make this clear, I'll completely go through the computations of the example of (0, 0); (1, 1); (2, 3). 

So, xData = [0, 1, 2], yData = [0, 1, 3].
First we will compute the averages of just xData and yData alone, since we will need those a lot.
`average of xData = (0 + 1 + 2) / 3 = 1`
`average of yData = (0 + 1 + 3) / 3 = 4/3`

Now, we will start computing m:
`xData*yData = [0, 1, 6]`, so `average of xData*yData = (0 + 1 + 6)/3 = 7/3`
`xData^2 = [0, 1, 4]`, so `average of xData^2 = (0 + 1 + 4) / 3 = 5/3`

So, we have everything we need to compute m. Putting it together:
`m = (average of xData*yData - (average of xData)*(average of yData)) / (average of xData^2 - (average of xData)^2)`
`m = (7/3 - (1) * (4/3)) / (5/3 - (1)^2) = 1 / (2/3) = 3/2 = 1.5000`

Now, to compute b:
`b = (average of yData) - m * (average of xData) = 4/3 - 3/2 * 1 = -1/6 = -0.1667`.

So, the line of best fit is: `y = 1.5000 * x - 0.1667`



# Example Inputs and Outputs
Your code will read in an array of doubles for the X data, followed by a non-double so the code knows when the array ends. 
Then it will read in an array of doubles for the Y data, followed by a non-double so the code knows when the array ends.
The X data array and the Y data array will ALWAYS be the same length.

As before, you should round m and b to 4 decimal places, and use those for output.
To do this, you can write:
let mRounded = print(String.localizedStringWithFormat("%.4f", m))
let bRounded = print(String.localizedStringWithFormat("%.4f", b))

Your code will output the equation of the (rounded) line of best fit, in the format "y = \(mRounded) * x + \(bRounded)". 

Example Input 1; this is for the data set (0, 0); (1, 1); (2, 2):
0
1
2
STOP
0
1
2
STOP

Example Output 1:
y = 1.0000 * x + 0.0000


Example Input 2; this is for the data set (0, 0); (1, 1); (2, 3):
0
1
2
STOP
0
1
3
STOP

Example Output 2:
y = 1.5000 * x + -0.1667


Example Input 3:
-3
-2
-2.5
1.2
0
2.1
STOP
2
1
1.3
-1
0
-2.5
STOP

Example Output 3:
y = -0.7735 * x + -0.4081

Example Input 4; This is ACTUAL data from the robot. The X data is time, and the Y data is angle of the robot spinning.
You can go here for a plot of the data: https://raw.githubusercontent.com/donald-pinckney/Write-Up-3/master/plot.png
The m value from the linear regression will be how many degrees the robot can spin per second:
0.01
0.02
0.03
0.04
0.05
0.06
0.07
0.08
0.09
0.1
0.11
0.12
0.13
0.14
0.15
0.16
0.17
0.18
0.19
0.2
0.21
0.22
0.23
0.24
0.25
0.26
0.27
0.28
0.29
0.3
0.31
0.32
0.33
0.34
0.35
0.36
0.37
0.38
0.39
0.4
0.41
0.42
0.43
0.44
0.45
0.46
0.47
0.48
0.49
0.5
0.51
0.52
0.53
0.54
0.55
0.56
0.57
0.58
0.59
0.6
0.61
0.62
0.63
0.64
0.65
0.66
0.67
0.68
0.69
0.7
0.71
0.72
0.73
0.74
0.75
0.76
0.77
0.78
0.79
0.8
0.81
0.82
0.83
0.84
0.85
0.86
0.87
0.88
0.89
0.9
0.91
0.92
0.93
0.94
0.95
0.96
0.97
0.98
0.99
1
1.01
1.02
1.03
1.04
1.05
1.06
1.07
1.08
1.09
1.1
1.11
1.12
1.13
1.14
1.15
1.16
1.17
1.18
1.19
1.2
1.21
1.22
1.23
1.24
1.25
1.26
1.27
1.28
1.29
1.3
1.31
1.32
1.33
1.34
1.35
1.36
1.37
1.38
1.39
1.4
1.41
1.42
1.43
1.44
1.45
1.46
1.47
1.48
1.49
1.5
1.51
1.52
1.53
1.54
1.55
1.56
1.57
1.58
1.59
1.6
1.61
1.62
1.63
1.64
1.65
1.66
1.67
1.68
1.69
1.7
1.71
1.72
1.73
1.74
1.75
1.76
1.77
1.78
1.79
1.8
1.81
1.82
1.83
1.84
1.85
1.86
1.87
1.88
1.89
1.9
1.91
1.92
1.93
1.94
1.95
1.96
1.97
1.98
1.99
2
2.01
2.02
2.03
2.04
2.05
2.06
2.07
2.08
2.09
2.1
2.11
2.12
2.13
2.14
2.15
2.16
2.17
2.18
2.19
2.2
2.21
2.22
2.23
2.24
2.25
2.26
2.27
2.28
2.29
2.3
2.31
2.32
2.33
2.34
2.35
2.36
2.37
2.38
2.39
2.4
2.41
2.42
2.43
2.44
2.45
2.46
2.47
2.48
2.49
2.5
2.51
2.52
2.53
2.54
2.55
2.56
2.57
2.58
2.59
2.6
2.61
2.62
2.63
2.64
2.65
2.66
2.67
2.68
2.69
2.7
2.71
2.72
2.73
2.74
2.75
2.76
2.77
2.78
2.79
2.8
2.81
2.82
2.83
2.84
2.85
2.86
2.87
2.88
2.89
2.9
2.91
2.92
2.93
2.94
2.95
2.96
2.97
2.98
2.99
3
3.01
3.02
3.03
3.04
3.05
3.06
3.07
3.08
3.09
3.1
3.11
3.12
3.13
3.14
3.15
3.16
3.17
3.18
3.19
3.2
3.21
3.22
3.23
3.24
3.25
3.26
3.27
3.28
3.29
3.3
3.31
3.32
3.33
3.34
3.35
3.36
3.37
3.38
3.39
3.4
3.41
3.42
3.43
3.44
3.45
3.46
3.47
3.48
3.49
3.5
3.51
3.52
3.53
3.54
3.55
3.56
3.57
3.58
3.59
3.6
3.61
3.62
3.63
3.64
3.65
3.66
3.67
3.68
3.69
3.7
3.71
3.72
3.73
3.74
3.75
3.76
3.77
3.78
3.79
3.8
3.81
3.82
3.83
3.84
3.85
3.86
3.87
3.88
3.89
3.9
3.91
3.92
3.93
3.94
3.95
3.96
3.97
3.98
3.99
4
4.01
4.02
4.03
4.04
4.05
4.06
4.07
4.08
4.09
4.1
4.11
4.12
4.13
4.14
4.15
4.16
4.17
4.18
4.19
4.2
4.21
4.22
4.23
4.24
4.25
4.26
4.27
4.28
4.29
4.3
4.31
4.32
4.33
4.34
4.35
4.36
4.37
4.38
4.39
4.4
4.41
4.42
4.43
4.44
4.45
4.46
4.47
4.48
4.49
4.5
4.51
4.52
4.53
4.54
4.55
4.56
4.57
4.58
4.59
4.6
4.61
4.62
4.63
4.64
4.65
4.66
4.67
4.68
4.69
4.7
4.71
4.72
4.73
4.74
4.75
4.76
4.77
4.78
4.79
4.8
4.81
4.82
4.83
4.84
4.85
4.86
4.87
4.88
4.89
4.9
4.91
4.92
4.93
4.94
4.95
4.96
4.97
4.98
4.99
5
5.01
5.02
5.03
5.04
5.05
5.06
5.07
5.08
5.09
5.1
5.11
5.12
5.13
5.14
5.15
5.16
5.17
5.18
5.19
5.2
5.21
5.22
5.23
5.24
5.25
5.26
5.27
STOP
-0.000128
-0.003803
-0.007859
-0.01559
-0.072106
-0.361907
-0.872449
-1.564194
-2.446775
-3.495987
-4.683067
-6.014097
-7.47045
-9.010181
-10.640895
-12.340543
-14.099875
-15.923451
-17.806711
-19.733435
-21.712365
-23.738561
-25.794155
-27.884723
-30.001268
-32.134159
-34.295308
-36.489783
-38.710869
-40.944753
-43.197772
-45.47626
-47.772235
-50.073786
-52.390923
-54.712368
-57.050793
-59.398722
-61.753113
-64.112447
-66.473934
-68.840364
-71.214143
-73.596538
-75.988565
-78.384899
-80.785922
-83.188086
-85.593417
-87.997988
-90.392422
-92.782041
-95.180783
-97.587381
-99.992459
-102.406027
-104.825171
-107.245962
-109.675369
-112.097681
-114.517711
-116.930139
-120.541747
-122.947775
-125.359126
-127.771743
-130.198997
-132.629228
-135.068519
-137.487156
-139.902245
-142.313722
-144.726656
-147.133381
-149.550624
-151.969261
-154.389355
-156.797284
-159.209331
-161.603575
-164.008843
-166.413921
-168.840921
-171.270138
-173.671605
-176.066609
-178.469913
-180.88234
-183.296288
-185.723985
-188.135526
-190.549981
-192.960508
-195.383833
-197.814191
-200.236375
-202.6329
-205.022519
-207.426583
-209.834449
-212.265123
-214.694277
-217.118109
-219.533071
-221.945625
-224.354378
-226.782709
-229.198114
-231.613773
-234.054268
-236.49451
-238.942988
-241.390516
-243.837157
-246.291021
-248.729932
-251.178727
-253.623341
-256.064533
-258.492863
-260.910549
-263.335649
-265.784887
-268.227347
-270.670059
-273.097883
-275.526593
-277.94504
-280.366211
-282.800877
-285.224899
-287.663177
-290.102722
-293.747467
-296.167751
-298.592343
-301.031254
-303.469152
-305.898306
-308.328347
-310.750151
-313.179432
-315.605418
-318.023548
-320.442692
-322.867157
-325.293017
-327.702657
-330.102666
-332.487469
-334.872146
-337.250867
-339.62642
-341.998425
-344.381201
-346.771453
-349.155876
-351.537385
-353.911417
-356.281775
-358.657581
-361.027052
-363.393101
-365.768528
-368.147502
-370.529898
-372.911914
-375.292662
-377.674297
-380.066324
-382.454422
-384.83631
-387.223902
-389.611619
-391.99769
-394.390603
-396.785417
-399.180865
-401.585309
-403.995582
-406.397366
-408.793447
-411.183572
-413.574585
-415.965344
-418.362312
-420.763208
-423.167146
-425.576279
-427.976035
-430.392137
-432.808493
-435.222441
-437.63981
-440.054899
-442.467453
-444.881148
-447.288253
-450.891308
-453.311212
-455.732953
-458.162361
-460.585686
-463.01427
-465.42562
-467.832726
-470.239768
-472.642755
-475.049353
-477.45855
-479.875412
-482.303046
-484.725357
-487.14203
-489.56903
-492.001035
-494.440516
-496.865425
-499.280007
-501.698137
-504.118167
-506.5337
-508.963677
-511.387192
-513.828511
-516.260707
-518.6872
-521.104379
-523.5182
-525.918463
-528.323858
-530.73977
-533.151818
-535.548786
-537.953293
-540.367052
-542.789806
-545.19989
-547.60237
-550.003393
-552.408915
-554.810064
-557.215206
-559.620157
-562.021243
-564.431707
-566.847999
-569.268663
-571.691482
-574.111259
-576.518617
-578.928194
-581.324022
-583.73778
-586.163892
-588.603437
-591.031894
-593.466497
-595.897489
-598.314732
-600.741732
-603.159101
-605.585404
-608.016649
-610.44612
-612.870078
-615.279275
-617.698355
-620.117498
-622.555903
-624.978404
-627.404771
-631.035323
-633.444963
-635.844592
-638.259427
-640.683893
-643.1114
-645.543341
-647.974903
-650.402663
-652.828903
-655.250454
-657.678594
-660.097485
-662.523978
-664.941094
-667.348072
-669.759613
-672.17204
-674.578005
-676.988786
-679.396398
-681.790198
-684.186659
-686.584134
-688.978061
-691.368313
-693.751216
-696.134119
-698.507264
-700.883577
-703.265593
-705.648242
-708.022275
-710.391112
-712.761469
-715.132081
-717.505733
-719.874823
-722.238338
-724.60046
-726.96955
-729.349031
-731.727879
-734.097476
-736.473029
-738.846555
-741.221981
-743.599689
-745.976382
-748.353583
-750.73167
-753.114192
-755.500643
-757.894443
-760.28913
-762.684325
-765.070142
-767.458113
-769.842536
-772.233168
-774.632417
-777.037242
-779.447008
-781.854494
-784.266415
-786.681123
-789.099253
-791.523465
-793.952873
-796.377592
-798.805479
-802.443127
-804.847888
-807.265131
-809.688646
-812.127304
-814.559056
-816.976489
-819.383784
-821.789052
-824.194004
-826.596231
-828.995289
-831.412342
-833.84137
-836.263998
-838.67275
-841.092654
-843.518007
-845.95318
-848.401722
-850.83303
-853.253884
-855.686523
-858.103892
-860.521199
-862.939582
-865.371207
-867.810435
-870.240539
-872.659049
-875.07021
-877.466861
-879.882773
-882.302297
-884.706805
-887.1141
-889.527351
-891.937054
-894.356641
-896.777305
-899.187452
-901.594177
-903.992793
-906.399391
-908.811122
-911.227288
-913.645798
-916.07134
-918.506577
-920.944284
-923.382055
-925.812223
-928.244101
-930.669327
-934.330608
-936.76103
-939.19652
-941.634544
-944.066993
-946.495006
-948.919092
-951.347739
-953.783482
-956.216438
-958.654209
-961.087038
-963.506941
-965.937236
-968.373486
-970.81189
-973.248014
-975.685405
-978.128117
-980.567662
-982.997577
-985.423943
-987.854364
-990.289727
-992.731046
-995.173125
-997.614951
-1000.053609
-1002.504938
-1004.963998
-1007.418241
-1009.856139
-1012.285673
-1014.712927
-1017.141827
-1019.560717
-1021.989998
-1024.42929
-1026.859204
-1029.281515
-1031.70294
-1034.122717
-1036.540086
-1038.954415
-1041.372291
-1043.78852
-1046.202975
-1048.609447
-1051.006035
-1053.404523
-1055.814797
-1058.22507
-1060.639398
-1063.051066
-1065.450315
-1067.849437
-1070.252741
-1072.654524
-1075.047564
-1077.433761
-1079.821353
-1082.216547
-1085.794322
-1088.171142
-1090.561774
-1092.963938
-1095.356471
-1097.733228
-1100.106627
-1102.49124
-1104.87636
-1107.282832
-1109.663961
-1112.043062
-1114.447823
-1116.847199
-1119.251136
-1121.651589
-1124.050711
-1126.464343
-1128.878101
-1131.30453
-1133.723927
-1136.152068
-1138.589332
-1141.017155
-1143.442825
-1145.865453
-1148.273572
-1150.682641
-1153.106854
-1155.529165
-1157.95211
-1160.375879
-1162.808137
-1165.229435
-1167.652633
-1170.080077
-1172.509421
-1174.934077
-1177.352523
-1179.774581
-1182.196829
-1184.613945
-1187.038791
-1189.46275
-1191.881576
-1194.303888
-1196.728607
-1199.145089
-1201.564359
-1203.979131
-1206.410186
-1208.83972
-1211.265453
-1213.694924
-1216.11185
-1218.536062
-1220.970728
-1223.412744
-1225.836386
-1228.260725
-1230.66688
-1233.066446
-1235.476656
-1237.89865
-1240.331796
-1242.75113
-1245.179777
-1247.597336
STOP

Example Output 4:
y = -242.3617 * x + 30.8266

